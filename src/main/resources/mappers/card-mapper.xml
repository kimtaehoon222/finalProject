<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cardMapper">

	<resultMap type="Card" id="cardResult">
	
		<result property="cardRegNo" column="CARD_REG_NO"/>
		<result property="deptCode" column="DEPT_CODE"/>
		<result property="cardIssuer" column="CARD_ISSUER"/>
		<result property="cardName" column="CARD_NAME"/>
		<result property="cardStatus" column="CARD_STATUS"/>
		<result property="ctgNo" column="CTG_NO"/>
		
		<result property="cardLine" column="CREDIT_LINE"/>
		<result property="paymentType" column="PAYMENT_TYPE"/>
		<result property="cardNo" column="CARD_NO"/>
		<result property="expirationDate" column="EXPIRATION_DATE"/>
		<result property="securityCode" column="SECURITY_CODE"/>
		
		<result property="statNo" column="STAT_NO"/>
		<result property="empNo" column="EMP_NO"/>
		<result property="paymentStatus" column="PAYMENT_STATUS"/>
		<result property="amount" column="AMOUNT"/>
		<result property="transactionDate" column="TRANSACTION_DATE"/>
		<result property="storeName" column="STORE_NAME"/>
		<result property="statMemo" column="STAT_MEMO"/>
		<result property="statStatus" column="STAT_STATUS"/>
		
		<result property="originName" column="ORIGIN_NAME"/>
		<result property="changeName" column="CHANGE_NAME"/>
		<result property="filePath" column="FILE_PATH"/>
		
		<result property="empName" column="EMP_NAME"/>
		<result property="deptPwd" column="DEPT_PWD"/>
	</resultMap>
	
	<select id="cardStatListCount" resultType="_int">
		SELECT 
		       COUNT(*)
		  FROM CARD_STATEMENT A
		  JOIN EMPLOYEE B ON (A.EMP_NO = B.EMP_NO)
		  JOIN DEP_CARD C ON (A.CARD_REG_NO = C.CARD_REG_NO)
		 WHERE A.STAT_STATUS = 'Y'
  		   AND C.DEPT_CODE = #{deptCode}
	 </select>
	
	<select id="selectCardStatList" resultMap="cardResult">
		SELECT 
		       A.STAT_NO
		     , A.EMP_NO
		     , B.EMP_NAME
		     , TO_CHAR(A.TRANSACTION_DATE, 'YYYY-MM-DD') AS TRANSACTION_DATE
		     , A.AMOUNT
		     , A.STORE_NAME
		     , CASE WHEN A.PAYMENT_STATUS = 'A' THEN '승인'
		            ELSE '취소'
		       END AS PAYMENT_STATUS
		  FROM CARD_STATEMENT A
		  JOIN EMPLOYEE B ON (A.EMP_NO = B.EMP_NO)
		  JOIN DEP_CARD C ON (A.CARD_REG_NO = C.CARD_REG_NO)
		 WHERE A.STAT_STATUS = 'Y'
  		   AND C.DEPT_CODE = #{deptCode}
		 ORDER BY A.STAT_NO DESC
	 </select>
	 
	<insert id="insertCardStat">
		INSERT ALL
		  INTO CARD_STATEMENT
		VALUES( SEQ_CSNO.NEXTVAL 
		      , ( SELECT A.CARD_REG_NO 
		            FROM DEP_CARD A 
		           WHERE DEPT_CODE = ( SELECT B.DEPT_CODE 
		                                 FROM EMPLOYEE B 
		                                WHERE EMP_NO = #{empNo}
		                             ) 
		        ) 
		      , #{empNo} , #{paymentStatus} , #{amount} , #{transactionDate} , #{storeName} 
		      , #{statMemo} , DEFAULT , DEFAULT
		      )
		  INTO ATTACHMENT
		VALUES( SEQ_FNO.NEXTVAL , SEQ_CSNO.CURRVAL , 'CS' , #{originName} , #{changeName}
		      , #{filePath} , SYSDATE , DEFAULT )
		SELECT *
		  FROM DUAL 	
	</insert>
	 
	<insert id="insertCardStatOnly">
		INSERT INTO CARD_STATEMENT
		VALUES( SEQ_CSNO.NEXTVAL 
		      , ( SELECT A.CARD_REG_NO 
		            FROM DEP_CARD A 
		           WHERE DEPT_CODE = ( SELECT B.DEPT_CODE 
		                                 FROM EMPLOYEE B 
		                                WHERE EMP_NO = #{empNo}
		                             ) 
		        ) 
		      , #{empNo} , #{paymentStatus} , #{amount} , #{transactionDate} , #{storeName} 
		      , #{statMemo} , DEFAULT , DEFAULT
		      )
	</insert>
	
	<select id="selectCardStat" resultMap="cardResult">
		SELECT 
		       A.STAT_NO
		     , A.EMP_NO
		     , B.EMP_NAME
		     , A.PAYMENT_STATUS
		     , A.AMOUNT
		     , TO_CHAR(A.TRANSACTION_DATE, 'YYYY-MM-DD') AS TRANSACTION_DATE
		     , A.STORE_NAME
		     , A.STAT_MEMO
		     , C.CHANGE_NAME
		     , C.ORIGIN_NAME
		  FROM CARD_STATEMENT A
		  LEFT JOIN EMPLOYEE B ON (A.EMP_NO = B.EMP_NO)
		  LEFT JOIN ATTACHMENT C ON (A.STAT_NO = C.REF_NO AND A.CTG_NO = C.CTG_NO)
		 WHERE A.STAT_STATUS = 'Y'
		   AND A.STAT_NO = #{statNo}
	</select>
	
	<update id="updateCardStat">
		UPDATE CARD_STATEMENT
		   SET
		       PAYMENT_STATUS = #{paymentStatus}
		     , AMOUNT = #{amount}
		     , TRANSACTION_DATE = #{transactionDate}
		     , STORE_NAME = #{storeName}
		     , STAT_MEMO = #{statMemo}
		 WHERE STAT_STATUS = 'Y'
		   AND STAT_NO = #{statNo}
	</update>
	
	<insert id="insertAttachment">
		INSERT INTO ATTACHMENT
		VALUES (
		       SEQ_FNO.NEXTVAL
		     ,  #{statNo}
		     , 'CS'
		     , #{originName}
		     , #{changeName}
		     , #{filePath}
		     , SYSDATE
		     , DEFAULT
		       )
	</insert>
	
	<update id="updateAttachment">
		UPDATE ATTACHMENT
		   SET
		       CHANGE_NAME = #{changeName}
		     , ORIGIN_NAME = #{originName}
		 WHERE STATUS = 'Y'
		   AND CTG_NO = 'CS'
		   AND REF_NO = #{statNo}
	</update>
	
	<update id="deleteCardStat">
		UPDATE CARD_STATEMENT
		   SET STAT_STATUS = 'N'
		 WHERE STAT_STATUS = 'Y'
		   AND STAT_NO = #{statNo}
	</update>
	
	<update id="deleteAttachment">
		UPDATE ATTACHMENT
		   SET STATUS = 'N'
		 WHERE STATUS = 'Y'
		   AND CTG_NO = 'CS'
		   AND REF_NO = #{statNo}
	</update>
	
	<select id="searchStatCount" resultType="_int">
		SELECT 
		       COUNT(*)
		  FROM CARD_STATEMENT A
		  JOIN EMPLOYEE B ON (A.EMP_NO = B.EMP_NO)
		  JOIN DEP_CARD C ON (A.CARD_REG_NO = C.CARD_REG_NO)
		 WHERE A.STAT_STATUS = 'Y'
		   AND C.DEPT_CODE = #{deptCode}
	   <![CDATA[ 
		   AND (A.TRANSACTION_DATE BETWEEN #{startDate} AND #{endDate})
		   AND A.AMOUNT >= #{amount}
	   ]]>
	   <if test='keyWord != null and keyWord != "" and keyWord != "0"'>
	   	<![CDATA[ 
		   AND (A.STORE_NAME LIKE #{keyWord} OR A.STAT_MEMO LIKE #{keyWord})
	   	]]>
	   </if>
	   <if test='empName != null and empName != "" and keyWord != "0"'>
	   	<![CDATA[ 
		   AND B.EMP_NAME = #{empName}
		]]>
	   </if>
	</select>
	
	<select id="searchStatList" resultMap="cardResult">
		SELECT 
		        A.STAT_NO
	          , A.EMP_NO
	          , B.EMP_NAME
	          , TO_CHAR(A.TRANSACTION_DATE, 'YYYY-MM-DD') AS TRANSACTION_DATE
	          , A.AMOUNT
	          , A.STORE_NAME
	          , CASE WHEN A.PAYMENT_STATUS = 'A' THEN '승인'
		            ELSE '취소'
		       END AS PAYMENT_STATUS
		  FROM CARD_STATEMENT A
		  JOIN EMPLOYEE B ON (A.EMP_NO = B.EMP_NO)
		  JOIN DEP_CARD C ON (A.CARD_REG_NO = C.CARD_REG_NO)
		 WHERE A.STAT_STATUS = 'Y'
		   AND C.DEPT_CODE = #{deptCode}
	   <![CDATA[ 
		   AND (A.TRANSACTION_DATE BETWEEN #{startDate} AND #{endDate})
		   AND A.AMOUNT >= #{amount}
	   ]]>
	   <if test='keyWord != null and keyWord != "" and keyWord != "0"'>
	   	<![CDATA[ 
		   AND (A.STORE_NAME LIKE #{keyWord} OR A.STAT_MEMO LIKE #{keyWord})
	   	]]>
	   </if>
	   <if test='empName != null and empName != "" and keyWord != "0"'>
	   	<![CDATA[ 
		   AND B.EMP_NAME = #{empName}
		]]>
	   </if>
	</select>

	<select id="selectCardInfo" resultMap="cardResult">
		SELECT 
		       A.CARD_ISSUER
		     , A.CARD_NAME
		     , B.CHANGE_NAME
		     , B.ORIGIN_NAME
		     , C.PAYMENT_TYPE
		     , C.CARD_NO
		     , C.EXPIRATION_DATE
		     , C.SECURITY_CODE
		     <!-- , D.DEPT_PWD -->
		  FROM DEP_CARD A
		  JOIN ATTACHMENT B ON (A.CARD_REG_NO = B.REF_NO AND A.CTG_NO = B.CTG_NO)
		  JOIN CARD_INFO C ON (A.CARD_REG_NO = C.CARD_REG_NO)
		  <!--JOIN DEPARTMENT D ON (A.DEPT_CODE = D.DEPT_CODE)-->
		 WHERE A.CARD_STATUS = 'Y'
		   AND A.DEPT_CODE = #{deptCode}
	</select>
	
	
	<resultMap type="com.workie.easy.acct.model.dto.CardData" id="chartResult">
		<result property="thisMonth" column="THIS_MONTH"/>
		<result property="aCount" column="A_COUNT"/>
		<result property="cCount" column="C_COUNT"/>
		<result property="aSum" column="A_SUM"/>
		<result property="cSum" column="C_SUM"/>
		<result property="add" column="ADD"/>
		<result property="balance" column="BALANCE"/>
		<result property="creditLine" column="CREDIT_LINE"/>
	</resultMap>
	
	<select id="cardData" resultMap="chartResult">
		WITH RESULT1 AS
		(
		 SELECT 
		        SUM(A.AMOUNT) AS TEST1
		      , COUNT(A.AMOUNT) AS TEST2
		   FROM CARD_STATEMENT A
		   JOIN DEP_CARD B ON (A.CARD_REG_NO = B.CARD_REG_NO)
		  WHERE A.STAT_STATUS = 'Y'
		    AND B.DEPT_CODE = #{deptCode}
		    AND TO_CHAR(A.TRANSACTION_DATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM') 
		    AND A.PAYMENT_STATUS = 'A'
		),
		RESULT2 AS
		(
		 SELECT 
		       SUM(A.AMOUNT) AS TEST1
		     , COUNT(A.AMOUNT) AS TEST2
		  FROM CARD_STATEMENT A
		  JOIN DEP_CARD B ON (A.CARD_REG_NO = B.CARD_REG_NO)
		 WHERE A.STAT_STATUS = 'Y'
		   AND B.DEPT_CODE = #{deptCode}
		   AND TO_CHAR(A.TRANSACTION_DATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM') 
		   AND A.PAYMENT_STATUS = 'C'
		),
		CREDIT_LINE AS
		(
		 SELECT 
		        B.CREDIT_LINE
		   FROM DEP_CARD A
		   JOIN CARD_INFO B ON (A.CARD_REG_NO = B.CARD_REG_NO)
		  WHERE A.DEPT_CODE = #{deptCode}
		)
		SELECT 
		       TO_CHAR(SYSDATE, 'YYYY-MM') AS "THIS_MONTH"
		     , (SELECT TEST2 FROM RESULT1) AS "A_COUNT"
		     , (SELECT TEST2 FROM RESULT2) AS "C_COUNT"
		     , (SELECT TEST1 FROM RESULT1) AS "A_SUM"
		     , (SELECT TEST1 FROM RESULT2) AS "C_SUM"
		     , ((SELECT TEST1 FROM RESULT1)-(SELECT TEST1 FROM RESULT2)) AS "ADD"
		     , (SELECT * FROM CREDIT_LINE) - ((SELECT TEST1 FROM RESULT1)-(SELECT TEST1 FROM RESULT2)) AS "BALANCE"
		     , (SELECT * FROM CREDIT_LINE) AS "CREDIT_LINE"
		  FROM DUAL
	</select>
	
	
	<select id="chartData" resultType="com.workie.easy.acct.model.dto.CardChart">
		WITH RESULT1 AS
		(
		 SELECT 
		        SUM(A.AMOUNT) AS TEST1
		      , COUNT(A.AMOUNT) AS TEST2
		   FROM CARD_STATEMENT A
		   JOIN DEP_CARD B ON (A.CARD_REG_NO = B.CARD_REG_NO)
		  WHERE A.STAT_STATUS = 'Y'
		    AND B.DEPT_CODE = #{deptCode}
		    AND TO_CHAR(A.TRANSACTION_DATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM') 
		    AND A.PAYMENT_STATUS = 'A'
		),
		RESULT2 AS
		(
		 SELECT 
		       SUM(A.AMOUNT) AS TEST1
		     , COUNT(A.AMOUNT) AS TEST2
		  FROM CARD_STATEMENT A
		  JOIN DEP_CARD B ON (A.CARD_REG_NO = B.CARD_REG_NO)
		 WHERE A.STAT_STATUS = 'Y'
		   AND B.DEPT_CODE = #{deptCode}
		   AND TO_CHAR(A.TRANSACTION_DATE, 'YYYY-MM') = TO_CHAR(SYSDATE, 'YYYY-MM') 
		   AND A.PAYMENT_STATUS = 'C'
		),
		CREDIT_LINE AS
		(
		 SELECT 
		        B.CREDIT_LINE
		   FROM DEP_CARD A
		   JOIN CARD_INFO B ON (A.CARD_REG_NO = B.CARD_REG_NO)
		  WHERE A.DEPT_CODE = #{deptCode}
		)
		SELECT 
		       '사용금액' as "NAME"
		     , ((SELECT TEST1 FROM RESULT1)-(SELECT TEST1 FROM RESULT2)) AS "AMOUNT"
		     
		  FROM DUAL
		 UNION
		SELECT
		       '잔액' AS "NAME"
		     , (SELECT * FROM CREDIT_LINE) - ((SELECT TEST1 FROM RESULT1)-(SELECT TEST1 FROM RESULT2)) AS "AMOUNT"
		  FROM DUAL
	</select>
</mapper>