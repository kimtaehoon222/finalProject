<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="mailMapper">

	<!-- 메일 전송(등록) -->
	<insert id="insertMail" parameterType="Mail">
		INSERT ALL
      	  INTO EASYWORK.MAIL
    	VALUES (SEQ_ENO.NEXTVAL, #{reserveYn}, DEFAULT, NVL(TO_DATE(#{sendDate}, 'YYYY-MM-DDHH24:MI:SS'), SYSDATE) 
    	     , #{cancelDate}, DEFAULT, DEFAULT, #{stateCode}, #{typeNo}, DEFAULT)
          INTO EASYWORK.MAIL_INFO
   		VALUES (SEQ_ENO.CURRVAL, #{title}, #{content}, #{toMail}, #{fromMail}, #{ccMail})       
		<if test="originName != null">
	      INTO EASYWORK.ATTACHMENT
   		VALUES (SEQ_FNO.NEXTVAL, SEQ_ENO.CURRVAL, 'M', #{originName}, #{changeName}, #{filePath}, SYSDATE, DEFAULT)       
		</if>
		SELECT * 
	      FROM DUAL
	</insert>
	
	<!-- 메일 리스트 개수 조회 -->
	<select id="selectMailListCount" parameterType="MailType" resultType="_int">
		SELECT COUNT(*)
		  FROM EASYWORK.MAIL_INFO A
     LEFT JOIN EASYWORK.MAIL B ON A.MAIL_NO = B.MAIL_NO
		 <trim prefix="WHERE" prefixOverrides="AND|OR">
		 	<choose>
		 		<when test="receive != null">
		 			((CC_MAIL LIKE '%,${mailEmpNo}%' OR CC_MAIL LIKE '%${mailEmpNo},%') OR A.TO_MAIL = #{mailEmpNo})
		 			AND B.STATE_CODE = 'FN'
		 		</when> 
		 		<when test="send != null">
		 			A.FROM_MAIL = #{mailEmpNo} 
		 			AND B.RESERVE_YN = 'N'
		 		</when>
		 		<when test="reserve != null">
		 			A.FROM_MAIL = #{mailEmpNo} 
		 			AND B.RESERVE_YN = 'Y'
		 			AND B.STATE_CODE IN('EP', 'CN') 
		 		</when>
		 		<when test="delete != null">
		 			(A.TO_MAIL = #{mailEmpNo} OR A.FROM_MAIL = #{mailEmpNo})
		 		</when>
		 	</choose>
		 	<choose>
		 		<when test="delete != null">
		 			AND B.STATUS = 'N'
		 		</when>
		 		<otherwise>
		 			AND B.STATUS = 'Y'
		 		</otherwise>
		 	</choose>
		 </trim>
	</select>
	
   <!-- 메일 리스트 개수 조회
   <select id="selectReceiveMailListCount" parameterType="_int" resultType="_int">
      SELECT COUNT(*)
        FROM EASYWORK.MAIL_INFO A
        JOIN EASYWORK.MAIL B ON A.MAIL_NO = B.MAIL_NO
       WHERE A.TO_MAIL = #{toMail} 
         AND B.STATUS = 'Y'
   </select> -->
	
	<resultMap type="Mail" id="mailResultSet">
		<id property="mailNo" column="MAIL_NO"/>
		<result property="typeName" column="TYPE_NAME"/>
		<result property="empName" column="EMP_NAME"/>
		<result property="sendDate" column="SEND_DATE"/>
		<result property="createDate" column="CREATE_DATE"/>
		<result property="cancelDate" column="CANCEL_DATE"/>
		<result property="changeName" column="CHANGE_NAME"/>
		<result property="originName" column="ORIGIN_NAME"/>
		<result property="filePath" column="FILE_PATH"/>
		<result property="stateCode" column="STATE_CODE"/>
		<result property="stateName" column="STATE_NAME"/>
		<result property="toName" column="TO_NAME"/>
		<result property="fromName" column="FROM_NAME"/>
		<result property="toMail" column="TO_MAIL"/>
		<result property="fromMail" column="FROM_MAIL"/>
		<result property="ccMail" column="CC_MAIL"/>
		<result property="ccName" column="CC_NAME"/>
		<result property="toId" column="TO_ID"/>
		<result property="fromId" column="FROM_ID"/>
		<result property="receiveCheck" column="RECEIVE_CHECK"/>
		<result property="ccId" column="CC_ID"/>
	</resultMap>
	
	<resultMap type="Department" id="departmentResultSet">
		<id property="deptCode" column="DEPT_CODE"/>
		<result property="deptName" column="DEPT_NAME"/>
		<result property="deptPwd" column="DEPT_PWD"/>
	</resultMap>

	<resultMap type="Employee" id="employeeResultSet">
		<id property="empNo" column="EMP_NO"/>
		<result property="empName" column="EMP_NAME"/>
		<result property="empId" column="EMP_ID"/>
	</resultMap>
	
	<!-- 메일 리스트 조회(받은 메일함) -->
	<select id="selectReceiveMailList" parameterType="_int" resultMap="mailResultSet">
		SELECT A.MAIL_NO, D.TYPE_NAME, B.EMP_NAME, A.TITLE, SUBSTR(A.CONTENT, 1, 15) AS CONTENT
    		 , TO_CHAR(C.SEND_DATE, 'YYYY-MM-DD HH24:MI:SS') AS SEND_DATE, E.CHANGE_NAME, C.RECEIVE_CHECK
		  FROM EASYWORK.MAIL_INFO A
     LEFT JOIN EASYWORK.EMPLOYEE B ON B.EMP_NO = A.FROM_MAIL AND B.ENT_YN = 'Y'
     LEFT JOIN EASYWORK.MAIL C ON C.MAIL_NO = A.MAIL_NO 
     LEFT JOIN EASYWORK.TYPE D ON D.TYPE_CODE = C.TYPE_NO
     LEFT JOIN EASYWORK.ATTACHMENT E ON E.CTG_NO = C.CTG_NO AND E.REF_NO = C.MAIL_NO AND E.STATUS = 'Y'
         WHERE ((CC_MAIL LIKE '%,${toMail}%' OR CC_MAIL LIKE '%${toMail},%') OR A.TO_MAIL = ${toMail})
           AND C.STATUS = 'Y'
           AND C.STATE_CODE = 'FN'
      ORDER BY C.SEND_DATE DESC
	</select>
	
	<!-- 메일 리스트 조회(보낸 메일함) -->
	<select id="selectSendMailList" parameterType="_int" resultMap="mailResultSet">
		SELECT A.MAIL_NO, D.TYPE_NAME, B.EMP_NAME, A.TITLE, SUBSTR(A.CONTENT, 1, 15) AS CONTENT
		     , TO_CHAR(C.SEND_DATE, 'YYYY-MM-DD HH24:MI:SS') AS SEND_DATE
		     , E.CHANGE_NAME, DECODE(C.RECEIVE_CHECK, 'Y', '읽음', '읽지않음') AS STATE_CODE
		  FROM EASYWORK.MAIL_INFO A
     LEFT JOIN EASYWORK.EMPLOYEE B ON B.EMP_NO = A.TO_MAIL AND B.ENT_YN = 'Y'
     LEFT JOIN EASYWORK.MAIL C ON C.MAIL_NO = A.MAIL_NO
     LEFT JOIN EASYWORK.TYPE D ON D.TYPE_CODE = C.TYPE_NO
     LEFT JOIN EASYWORK.ATTACHMENT E ON E.CTG_NO = C.CTG_NO AND E.REF_NO = C.MAIL_NO AND E.STATUS = 'Y'
	  	 WHERE A.FROM_MAIL = #{fromMail}
		   AND C.STATE_CODE = 'FN'
		   AND C.STATUS = 'Y'
	  ORDER BY C.SEND_DATE DESC
	</select>
	
	<!-- 메일 리스트 조회(예약 메일함) -->
	<select id="selectReserveMailList" parameterType="_int" resultMap="mailResultSet">
		SELECT A.MAIL_NO, D.TYPE_NAME, B.EMP_NAME, A.TITLE, SUBSTR(A.CONTENT, 1, 15) AS CONTENT
     		 , TO_CHAR(C.SEND_DATE, 'YYYY-MM-DD HH24:MI:SS') AS SEND_DATE
     		 , TO_CHAR(C.CREATE_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CREATE_DATE
     		 , TO_CHAR(C.CANCEL_DATE, 'YYYY-MM-DD HH24:MI:SS') AS CANCEL_DATE
     		 , E.CHANGE_NAME
     		 , C.STATE_CODE, F.STATE_NAME
		  FROM EASYWORK.MAIL_INFO A
	 LEFT JOIN EASYWORK.EMPLOYEE B ON B.EMP_NO = A.TO_MAIL AND B.ENT_YN = 'Y'
	 LEFT JOIN EASYWORK.MAIL C ON C.MAIL_NO = A.MAIL_NO
	 LEFT JOIN EASYWORK.TYPE D ON D.TYPE_CODE = C.TYPE_NO
	 LEFT JOIN EASYWORK.ATTACHMENT E ON E.CTG_NO = C.CTG_NO AND E.REF_NO = C.MAIL_NO AND E.STATUS = 'Y'
	 LEFT JOIN EASYWORK.MAIL_STATE F ON F.STATE_CODE = C.STATE_CODE
	     WHERE A.FROM_MAIL = #{fromMail}
	       AND C.RESERVE_YN = 'Y'
	       AND C.STATE_CODE IN('EP', 'CN') 
	       AND C.STATUS = 'Y'
	  ORDER BY C.CREATE_DATE DESC
	</select>
	
	<!-- 메일 리스트 조회(휴지통) -->
	<select id="selectDeleteMailList" parameterType="_int" resultMap="mailResultSet">
		SELECT A.MAIL_NO, DECODE(A.TO_MAIL, #{toFromMail}, '수신', '발신') AS STATE_NAME, A.TITLE, SUBSTR(A.CONTENT, 1, 15) AS CONTENT
    		 , TO_CHAR(C.SEND_DATE, 'YYYY-MM-DD HH24:MI:SS') AS SEND_DATE, E.CHANGE_NAME
    		 , (SELECT EMP_NAME 
		          FROM EMPLOYEE
		         WHERE EMP_NO = A.TO_MAIL) AS TO_NAME
		     , (SELECT EMP_NAME  
		          FROM EMPLOYEE
		         WHERE EMP_NO = A.FROM_MAIL) AS FROM_NAME
		  FROM EASYWORK.MAIL_INFO A
	 LEFT JOIN EASYWORK.EMPLOYEE B ON B.EMP_NO = A.TO_MAIL AND B.ENT_YN = 'Y'
	 LEFT JOIN EASYWORK.MAIL C ON C.MAIL_NO = A.MAIL_NO 
	 LEFT JOIN EASYWORK.ATTACHMENT E ON E.CTG_NO = C.CTG_NO AND E.REF_NO = C.MAIL_NO AND E.STATUS = 'Y'
	     WHERE C.STATUS = 'N'
	       AND (A.FROM_MAIL = #{toFromMail} OR A.TO_MAIL = #{toFromMail})
	  ORDER BY C.SEND_DATE DESC
	</select>
	
	<!-- 메일 상세조회시 수신확인처리 -->
	<update id="updateReceiveCheck" parameterType="_int">
		UPDATE EASYWORK.MAIL
		   SET RECEIVE_CHECK = 'Y'
		 WHERE MAIL_NO = #{mailNo}
		   AND RECEIVE_CHECK = 'N'
		   AND STATUS ='Y'
	</update>
	
	<!-- 메일 상세 조회  : 받은, 보낸, 예약 -->
	<select id="selectDetailMail" parameterType="_int" resultMap="mailResultSet">
		SELECT A.MAIL_NO, C.TYPE_NAME, A.TITLE, B.SEND_DATE
		     , (SELECT EMP_NAME 
		        FROM EMPLOYEE
		        WHERE EMP_NO = TO_MAIL AND ENT_YN = 'Y') AS TO_NAME
		     , (SELECT EMP_NAME  
		        FROM EMPLOYEE
		        WHERE EMP_NO = FROM_MAIL AND ENT_YN = 'Y') AS FROM_NAME
		     , A.TO_MAIL, A.FROM_MAIL, A.CC_MAIL, A.CONTENT
		     , D.CHANGE_NAME, D.ORIGIN_NAME, D.FILE_PATH, B.STATUS
		  FROM EASYWORK.MAIL_INFO A
	 LEFT JOIN EASYWORK.MAIL B ON B.MAIL_NO = A.MAIL_NO
	 LEFT JOIN EASYWORK.TYPE C ON C.TYPE_CODE = B.TYPE_NO
	 LEFT JOIN EASYWORK.ATTACHMENT D ON D.CTG_NO = B.CTG_NO AND D.REF_NO = B.MAIL_NO AND D.STATUS = 'Y'
	     WHERE A.MAIL_NO = #{mailNo}
		   AND B.STATUS = 'Y'
	</select>
	
	<!-- 참조인 조회 -->
	<select id="selectCcMembers" resultMap="mailResultSet">
		<![CDATA[
		SELECT TO_CHAR(EMP_NO) AS CC_MAIL, EMP_NAME AS CC_NAME
		  FROM EASYWORK.EMPLOYEE
		 WHERE EMP_NO IN(
						 WITH TMP AS (SELECT #{ccMail} AS STR FROM DUAL)
		               SELECT REGEXP_SUBSTR(TMP.STR, '[^,]+', 1, LEVEL) CODE
		                 FROM DUAL, TMP
		           CONNECT BY REGEXP_SUBSTR(TMP.STR, '[^,]+', 1, LEVEL) IS NOT NULL
                )
		]]>
	</select>
	
	<!-- 수신인 번호 조회 -->
	<select id="selectToMail" resultType="_int">
		SELECT TO_MAIL
	   	  FROM EASYWORK.MAIL_INFO
		 WHERE MAIL_NO = #{mailNo}
	</select>
	
	<!-- 메일 상세 조회 : 휴지통 -->
	<select id="selectDetailDeleteMail" parameterType="_int" resultMap="mailResultSet">
		SELECT A.MAIL_NO, C.TYPE_NAME, A.TITLE, B.SEND_DATE
		     , (SELECT EMP_NAME 
		        FROM EMPLOYEE
		        WHERE EMP_NO = TO_MAIL AND ENT_YN = 'Y') AS TO_NAME
		     , (SELECT EMP_NAME  
		        FROM EMPLOYEE
		        WHERE EMP_NO = FROM_MAIL AND ENT_YN = 'Y') AS FROM_NAME
		     , A.TO_MAIL, A.FROM_MAIL, A.CC_MAIL, A.CONTENT
		     , D.CHANGE_NAME, D.ORIGIN_NAME, D.FILE_PATH, B.STATUS
		  FROM EASYWORK.MAIL_INFO A
	 LEFT JOIN EASYWORK.MAIL B ON B.MAIL_NO = A.MAIL_NO
	 LEFT JOIN EASYWORK.TYPE C ON C.TYPE_CODE = B.TYPE_NO
	 LEFT JOIN EASYWORK.ATTACHMENT D ON D.CTG_NO = B.CTG_NO AND D.REF_NO = B.MAIL_NO AND D.STATUS = 'Y'
	     WHERE A.MAIL_NO = #{mailNo}
		   AND B.STATUS = 'N'
	</select>
	
	<select id="selectDetailMailForReply" parameterType="_int" resultMap="mailResultSet">
		SELECT A.*, B.SEND_DATE
		     , (SELECT CONCAT(EMP_ID, '@easy.co.kr')
		        FROM EASYWORK.EMPLOYEE
		        WHERE EMP_NO = TO_MAIL) AS TO_ID
		     , (SELECT CONCAT(EMP_ID, '@easy.co.kr')
		        FROM EASYWORK.EMPLOYEE
		        WHERE EMP_NO = FROM_MAIL) AS FROM_ID
		     , (SELECT EMP_NAME
		        FROM EASYWORK.EMPLOYEE
		        WHERE EMP_NO = TO_MAIL) AS TO_NAME
		     , (SELECT EMP_NAME 
		        FROM EASYWORK.EMPLOYEE
		        WHERE EMP_NO = FROM_MAIL)AS FROM_NAME
		  FROM EASYWORK.MAIL_INFO A
	 LEFT JOIN EASYWORK.MAIL B ON B.MAIL_NO = A.MAIL_NO
		 WHERE A.MAIL_NO = #{mailNo}
	</select>
	
	<!-- 메일 발송취소 -->
	<update id="cancelMail">
	    <![CDATA[
		UPDATE EASYWORK.MAIL
		   SET STATE_CODE = 'CN', CANCEL_DATE = SYSDATE
		 WHERE MAIL_NO = #{mailNo}
		   AND RESERVE_YN = 'Y'
		   AND STATE_CODE = 'EP'
		   AND RECEIVE_CHECK = 'N'
		   AND STATUS = 'Y'
		  ]]>
	</update>

	<!-- 메일 삭제 
	<update id="deleteMailList">
		UPDATE EASYWORK.MAIL
		   SET STATUS = 'N'
		 WHERE MAIL_NO = #{mailNo}
		   AND STATUS = 'Y'
	</update> -->
	
	<!-- 메일 복원 -->
	<update id="restoreMail">
		UPDATE EASYWORK.MAIL
		   SET STATUS = 'Y'
		 WHERE MAIL_NO = #{mailNo}
		   AND STATUS = 'N'
	</update>
	
	<!-- 메일 영구삭제 -->
	<delete id="permanentDeleteMail">
		DELETE FROM EASYWORK.MAIL
		 WHERE MAIL_NO = #{mailNo} 
		   AND STATUS = 'N'
	</delete>
	
	<!-- 메일 삭제 -->
	<!-- 위의  deleteMailList 와 동일 -->
	<update id="deleteMail">
		UPDATE EASYWORK.MAIL
		   SET STATUS = 'N'
		 WHERE MAIL_NO = #{mailNo}
		   AND STATUS = 'Y'
	</update>
	
	<!-- 직원 아이디로 직원 번호 조회 -->
	<select id="selectEmpNo" resultType="_int">
		SELECT EMP_NO
		  FROM EASYWORK.EMPLOYEE
		 WHERE EMP_ID = #{mailEmpId}
	</select>
	
	<!-- 직원 번호로 직원 아이디 조회 -->
	<select id="selectEmpId" resultType="string">
		SELECT EMP_ID AS CC_ID
		  FROM EASYWORK.EMPLOYEE
		 WHERE EMP_NO = #{empNo}
	</select>
	
	<!-- 부서 조회 -->
	<select id="seletDeptList" resultMap="departmentResultSet">
		SELECT * 
		  FROM EASYWORK.DEPARTMENT
	</select>

	<!-- 직원 조회 -->
	<select id="seletEmployeeList" resultMap="employeeResultSet">
		SELECT EMP_NAME, EMP_ID
		  FROM EASYWORK.EMPLOYEE
		 WHERE DEPT_CODE = (SELECT DEPT_CODE
		                      FROM EASYWORK.DEPARTMENT
		                      WHERE DEPT_NAME = #{selectDept})
		   AND ENT_YN = 'Y'
	</select>
	
	<!-- 처리해야할 예약메일 count -->
	<select id="checkReserveMail" resultType="_int">
		<![CDATA[
		SELECT COUNT(*) 
		  FROM EASYWORK.MAIL A
		  JOIN EASYWORK.MAIL_INFO B ON A.MAIL_NO = B.MAIL_NO
		 WHERE B.TO_MAIL = #{toMail}
		   AND A.RESERVE_YN = 'Y'
		   AND A.STATE_CODE = 'EP'
		   AND A.SEND_DATE <= SYSDATE
		 ]]>
	</select>
	
	<!-- 예약메일 update -->
	<update id="updateReserveMail">
		<![CDATA[
		UPDATE (
				SELECT * 
		          FROM EASYWORK.MAIL A
		     LEFT JOIN EASYWORK.MAIL_INFO B ON A.MAIL_NO = B.MAIL_NO
		         WHERE B.TO_MAIL = #{toMail}
		           AND A.RESERVE_YN = 'Y'
		           AND A.STATE_CODE = 'EP'
		           AND A.SEND_DATE <= SYSDATE
		        )
		   SET STATE_CODE = 'FN'
		 ]]>
	</update>
	
	<!-- 읽지 않은 메일 조회 -->
	<select id="selectMailListNoRead" resultMap="mailResultSet">
		SELECT ROWNUM, RESULT.*
		FROM
		(SELECT A.MAIL_NO, A.TITLE, B.SEND_DATE
		      ,C.EMP_NAME AS FROM_NAME, D.TYPE_NAME
		FROM EASYWORK.MAIL_INFO A 
		LEFT JOIN EASYWORK.MAIL B ON B.MAIL_NO = A.MAIL_NO
		LEFT JOIN EASYWORK.EMPLOYEE C ON C.EMP_NO = A.FROM_MAIL
		LEFT JOIN EASYWORK.TYPE D ON D.TYPE_CODE = B.TYPE_NO
		WHERE A.TO_MAIL = #{empNo}
		AND B.RECEIVE_CHECK = 'N'
		AND B.STATUS = 'Y'
		AND B.STATE_CODE = 'FN'
		ORDER BY B.SEND_DATE DESC) RESULT
	</select>

	<!-- 읽지 않은 메일 조회 -->
	<select id="selectFavoriteEmpList" resultMap="mailResultSet">
		<![CDATA[
		SELECT TO_ID, TO_NAME, CHANGE_NAME 
		FROM(
		     SELECT (SELECT CONCAT(EMP_ID, '@easy.co.kr') AS TO_ID
		               FROM EASYWORK.EMPLOYEE
		              WHERE EMP_NO = TO_MAIL) AS TO_ID, 
		            (SELECT EMP_NAME
		               FROM EASYWORK.EMPLOYEE
		              WHERE EMP_NO = TO_MAIL) AS TO_NAME,
		            (SELECT CHANGE_NAME
		               FROM ATTACHMENT
		              WHERE CTG_NO = 'E' AND REF_NO = TO_MAIL) AS CHANGE_NAME, 
		            COUNT(*) AS COUNT
		       FROM MAIL_INFO A
		  LEFT JOIN MAIL B ON B.MAIL_NO = A.MAIL_NO
		      WHERE FROM_MAIL = #{empNo}
		        AND TO_MAIL != #{empNo}
		   GROUP BY TO_MAIL
		   ORDER BY COUNT DESC) 
		WHERE ROWNUM <= 3
		 ]]>
		</select>
	
</mapper>